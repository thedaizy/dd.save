[
  {
    "type": "folder",
    "name": "README",
    "children": [
      {
        "type": "file",
        "name": "daizydisk.hdd",
        "content": "أهلين هنا بحط أشياء ما أدري ايش هي لسا\nHi this is daizy disk",
        "size": 90,
        "time": "2025-06-14T13:52:10.481Z"
      }
    ]
  },
  {
    "type": "file",
    "name": "hover zoom script",
    "content": "// ==UserScript==\n// @name         Hover Zoom Lite – Optimized & Working\n// @namespace    https://example.com\n// @version      0.9\n// @description  Fast hover zoom that actually works\n// @match        *://*/*\n// @run-at       document-idle\n// @grant        none\n// ==/UserScript==\n\n(() => {\n  'use strict';\n\n  /* ───────── overlay setup ───────── */\n  const overlay = document.createElement('img');\n  overlay.style.cssText = `\n    position: fixed;\n    max-width: 80vw;\n    max-height: 80vh;\n    width: auto;\n    height: auto;\n    pointer-events: none;\n    border: 2px solid #333;\n    box-shadow: 0 4px 16px rgba(0,0,0,.4);\n    z-index: 2147483647;\n    display: none;\n    object-fit: contain;\n  `;\n  document.documentElement.appendChild(overlay);\n\n  /* ───────── positioning ───────── */\n  const GAP = 20;\n  function place(x, y) {\n    const r = overlay.getBoundingClientRect();\n    const vw = innerWidth, vh = innerHeight;\n\n    let left = x + GAP, top = y + GAP;\n\n    if (left + r.width > vw - GAP) left = vw - r.width - GAP;\n    if (top + r.height > vh - GAP) top = vh - r.height - GAP;\n    if (left < GAP) left = GAP;\n    if (top < GAP) top = GAP;\n\n    overlay.style.left = left + 'px';\n    overlay.style.top = top + 'px';\n  }\n\n  /* ───────── URL enhancement ───────── */\n  function getBetterUrl(img) {\n    const src = img.currentSrc || img.src;\n\n    // Try srcset first (most reliable)\n    if (img.srcset) {\n      const entries = img.srcset.split(',').map(s => {\n        const [url, d = ''] = s.trim().split(/\\s+/);\n        const val = d.endsWith('w') ? +d.slice(0, -1) :\n                   d.endsWith('x') ? +d.slice(0, -1) : 0;\n        return { url, val };\n      }).sort((a, b) => b.val - a.val);\n\n      if (entries[0].url !== src) {\n        return { preview: src, full: entries[0].url };\n      }\n    }\n\n    // Quick URL modifications for common patterns\n    let enhanced = src;\n\n    // Remove/modify size parameters\n    if (enhanced.includes('w=') || enhanced.includes('h=')) {\n      enhanced = enhanced.replace(/([?&])[wh]=\\d+/g, (m, p) => p + 'w=1200');\n    }\n\n    // Remove size suffixes\n    if (/_\\d+x\\d+\\./.test(enhanced)) {\n      enhanced = enhanced.replace(/_\\d+x\\d+\\./, '_1200x1200.');\n    }\n\n    // Cloudinary-style\n    if (/\\/w_\\d+\\//.test(enhanced)) {\n      enhanced = enhanced.replace(/\\/w_\\d+\\//, '/w_1200/');\n    }\n\n    return enhanced !== src ? { preview: src, full: enhanced } : { preview: src, full: src };\n  }\n\n  /* ───────── state ───────── */\n  let currentImg = null;\n  let timerId = null;\n  let preloader = null;\n  let mx = 0, my = 0;\n\n  /* ───────── main logic ───────── */\n  function showPreview(img) {\n    if (currentImg !== img) return;\n\n    const { preview, full } = getBetterUrl(img);\n\n    overlay.src = preview;\n    overlay.style.display = 'block';\n    place(mx, my);\n\n    if (full !== preview) {\n      preloader = new Image();\n      preloader.onload = () => {\n        if (currentImg === img) {\n          overlay.src = full;\n          place(mx, my);\n        }\n      };\n      preloader.src = full;\n    }\n  }\n\n  function cancel() {\n    clearTimeout(timerId);\n    timerId = null;\n    currentImg = null;\n    if (preloader) {\n      preloader.onload = null;\n      preloader = null;\n    }\n    overlay.style.display = 'none';\n  }\n\n  /* ───────── events ───────── */\n  document.addEventListener('pointermove', (e) => {\n    mx = e.clientX;\n    my = e.clientY;\n\n    if (e.target instanceof HTMLImageElement && e.target !== currentImg) {\n      cancel();\n      currentImg = e.target;\n      timerId = setTimeout(() => showPreview(e.target), 200);\n    }\n\n    if (currentImg && !(e.target instanceof HTMLImageElement)) {\n      const r = currentImg.getBoundingClientRect();\n      const inside = mx >= r.left - 8 && mx <= r.right + 8 &&\n                    my >= r.top - 8 && my <= r.bottom + 8;\n      if (!inside) cancel();\n    }\n\n    if (overlay.style.display !== 'none') place(mx, my);\n  }, true);\n\n  overlay.addEventListener('load', () => place(mx, my));\n  addEventListener('scroll', () => overlay.style.display = 'none', { passive: true });\n})();",
    "size": 4284,
    "time": "2025-06-14T13:53:18.178Z"
  }
]
